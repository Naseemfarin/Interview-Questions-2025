1)Terraform provisioners. 
Terraform Provisioners are used for executing scripts or shell commands on a local or remote machine as part of resource creation/deletion.
Creation-time provisioners
  By default, provisioners run when the resource they are defined within is created. 
  Creation-time provisioners are only run during creation, not during updating or any other lifecycle. 
  They are meant as a means to perform bootstrapping of a system. So, if a creation-time provisioner fails, the resource is marked as tainted. A tainted resource will be planned for destruction and recreation upon the next terraform apply.

Destroy-time provisioners
If when = destroy is specified, the provisioner will run when the resource it is defined within is destroyed.

Destroy provisioners are run before the resource is destroyed. 
If they fail, Terraform will error and rerun the provisioners again on the next terraform apply.
Due to this behavior, care should be taken to destroy provisioners to be safe to run multiple times.
---

2)Terraform statefile
---
3) If we have created 3 instances using terraform script and the instance names are mentioned as a list
Suppose we removed 2nd instance name from the list and applied script again then what will happen to the already 3 instances created before.
  variable "instance_names" {
  default = ["instance-1", "instance-2", "instance-3"]
}

2 ways using count and for_each.
count:
resource "aws_instance" "example" {
  count = length(var.instance_names)
  ami           = "ami-xxxxxx"
  instance_type = "t2.micro"
  tags = {
    Name = var.instance_names[count.index]
  }
}
for_Each:
resource "aws_instance" "example" {
  for_each = toset(var.instance_names)
  ami           = "ami-xxxxxx"
  instance_type = "t2.micro"
  tags = {
    Name = each.value
  }
}

Approach
What happens when you remove "instance-2"?
count: "instance-2" destroyed, "instance-3" destroyed & recreated
for_each: Only "instance-2" destroyed; others untouched

---
4) In Terraform, what is the purpose of init, plan, and apply commands?
Command             Purpose                                           When to Use
terraform init     Initialize working directory & providers          First time or config change
terraform plan     Preview changes to infrastructure                 Before making changes
terraform apply    Apply changes to reach desired state              After reviewing the plan

---
5) What happens if the Terraform state file is accidentally deleted?

have a regular backup of your state file! Try to configure your Terraform backend in a remote place, like Google Cloud Storage
The process of recovering a deleted state file is never easy. You should import all the resources with terraform import. Check this document.
If someone changes a resource via the Azure portal and if you do a terraform plan in your environment, you should check that changes were done outside Terraform. Then you should update your code to match those changes, after applying your code. To clarify, if someone changes your instance_type = c4.xlarge and you have at your code instance_type = t3.micro, if you apply your code, that change will be reverted so if you want to stay with instances with c4.xlarge you should change your code.



