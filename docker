1)Explain Docker networking and types of network. What is the default network.
Docker networking hepls containers to communicate each other and othe external systems. 
Docker creates a bridge network called bridge by default. All containers without explicit network configuration are connected to this network.
Network Types:
1. Bridge network 
      Default network for containers
      Containers get private IP addresses (172.17.x.x)
      Port mapping required for external access
2. Host Network
      Container shares host's network stack
      No network isolation
      Container uses host's IP 
3. None Network
      No networking - completely isolated
      Only loopback interface available
4. OVerlay network
      For multi-host Docker Swarm clusters
      Containers on different hosts can communicate
5. Macvlan Network
      Container gets own MAC address
      Appears as physical device on network

commands:
# List networks
docker network ls
# Inspect network details
docker network inspect bridge

# See container's network config
docker inspect container_name | grep -A 20 NetworkSettings

# Connect running container to network
docker network connect my-network container_name

# Disconnect container from network
docker network disconnect my-network container_name

# Create custom network
docker network create app-network

# Run containers on same network
docker run -d --name database --network app-network postgres
docker run -d --name web --network app-network nginx

# Web container can reach database by name:
# postgresql://database:5432/mydb

# Map container port 80 to host port 8080
docker run -d -p 8080:80 --name web nginx

# Multiple port mappings
docker run -d -p 8080:80 -p 8443:443 --name web nginx

---

2)Docker image vs container
  Docker Image: 
     is a template or blueprint for creating containers.
     Contains application code, dependencies, and runtime
     Layered filesystem (each instruction creates a layer)
     Stored in registry (Docker Hub, etc.)
     Immutable - cannot be changed once built
  Docker Container
     A running instance of an image.
     Writable layer on top of image layers
     Has its own filesystem, networking, and process space
     Mutable - can be modified while running
     Ephemeral - data lost when container is removed
---
3)Docker bind mount vs volume 
Both are ways to persist data and share files between host and container, but they work differently:

Bind Mount
   Maps a host directory/file directly into the container.
   Direct mapping to host filesystem
   Full host path must be specified
   Host directory must exist
   High performance (direct access)
   Platform dependent paths
Example: Development with Bind Mount
# Mount your source code for live editing
docker run -it --rm \
  -v "C:\Users\nafarin\Documents\Github Actions:/workspace" \
  -w /workspace \
  python:3.9 bash
# Your test.py file changes are immediately visible in container

Volume
   Docker-managed storage that lives in Docker's storage area.
   Stored in Docker's area (/var/lib/docker/volumes/)
   Platform independent
   Can be shared between containers
   Survives container deletion
example: Database with Volume
# Create volume for database data
docker volume create postgres-data

# Run PostgreSQL with persistent data
docker run -d \
  --name database \
  -v postgres-data:/var/lib/postgresql/data \
  -e POSTGRES_PASSWORD=password \
  postgres:13

Best Practices:
   Use volumes for data persistence
   Use bind mounts for development
   Avoid mounting sensitive host directories
   Use named volumes instead of anonymous ones
   Regular volume backups for critical data
---

4) Can we install docker inside a container?
Yes, you can install Docker inside a container, but there are several approaches with different trade-offs:

1. Docker-in-Docker (DinD) - True Nested Docker
   # Run with privileged mode (required for DinD)
   docker run --privileged -d --name dind docker:dind

   # Run container that can use Docker
   docker run --privileged -it docker:latest sh
2. Docker Socket Mounting (Recommended)
   Mount the host's Docker socket into the container:
   # Mount Docker socket
   docker run -it --rm \
    -v /var/run/docker.sock:/var/run/docker.sock \
     docker:latest sh

   # Now you can run docker commands inside container
   docker ps  # Shows host's containers
---

5) difference between cmd and entry point?

A common pattern is to use ENTRYPOINT to specify the core command and CMD to provide default arguments or to allow customization of that command. 




